"""
M√≥dulo de integraci√≥n con modelos de IA
======================================

Este m√≥dulo maneja la comunicaci√≥n con modelos de IA locales
para generar contenido estructurado y documentaci√≥n de calidad.
"""

# Importar configuraci√≥n
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from config import DEFAULT_MODEL, DOC_FOOTER_AI_LABEL

import ollama
from datetime import datetime
import re
from typing import Dict

class ContentEnhancer:
    """
    Clase que mejora el contenido usando modelos de IA locales.
    
    Esta clase se encarga de usar modelos de IA local para generar 
    contenido estructurado y documentaci√≥n de calidad.
    """
    
    def __init__(self, model_name: str = None):
        """
        Inicializa el enhancer de contenido.
        
        Args:
            model_name (str): Nombre del modelo de IA a utilizar
        """
        self.model_name = model_name or DEFAULT_MODEL
        self.connection_verified = False
    
    def _check_ollama_connection(self) -> bool:
        """
        Verifica la conexi√≥n con el servicio de IA y la disponibilidad del modelo.
        
        Returns:
            bool: True si la conexi√≥n es exitosa
        """
        try:
            models = ollama.list()
            # Si la respuesta es un objeto con atributo 'models', usarlo; si es lista, usar directamente
            if hasattr(models, 'models'):
                model_list = models.models
            elif isinstance(models, dict) and 'models' in models:
                model_list = models['models']
            elif isinstance(models, list):
                model_list = models
            else:
                print(f"‚ùå Respuesta inesperada de ollama.list(): {models}")
                return False

            # Obtener nombres de modelos seg√∫n la estructura
            available_models = []
            for model in model_list:
                # Puede ser objeto con atributo 'model', o dict con clave 'model', o 'name'
                if hasattr(model, 'model'):
                    available_models.append(model.model)
                elif isinstance(model, dict) and 'model' in model:
                    available_models.append(model['model'])
                elif isinstance(model, dict) and 'name' in model:
                    available_models.append(model['name'])
                else:
                    available_models.append(str(model))

            if self.model_name not in available_models:
                print(f"‚ö†Ô∏è Advertencia: El modelo {self.model_name} no est√° disponible")
                print(f"üìã Modelos disponibles: {', '.join(available_models)}")
                return False

            print(f"‚úÖ Conexi√≥n con IA establecida - Modelo: {self.model_name}")
            return True

        except Exception as e:
            print(f"‚ùå Error conectando con el servicio de IA: {e}")
            print("üí° Aseg√∫rate de que el servicio de IA est√© ejecut√°ndose")
            return False
    
    def generate_content_with_ai(self, prompt: str) -> str:
        """
        Genera contenido usando el modelo de IA.
        
        Args:
            prompt (str): Prompt para el modelo
            
        Returns:
            str: Contenido generado por el modelo
        """
        try:
            # Verificar conexi√≥n solo cuando sea necesario
            if not self.connection_verified:
                if not self._check_ollama_connection():
                    return f"Error: No se pudo conectar con el servicio de IA"
                self.connection_verified = True
            
            print(f"ü§ñ Generando contenido con {self.model_name}...")
            
            response = ollama.chat(
                model=self.model_name,
                messages=[
                    {
                        'role': 'user',
                        'content': prompt
                    }
                ]
            )
            
            content = response['message']['content']
            print(f"‚úÖ Contenido generado exitosamente ({len(content)} caracteres)")
            return content
            
        except Exception as e:
            print(f"‚ùå Error generando contenido con IA: {e}")
            return f"Error al generar contenido: {e}"
    
    def enhance_summary(self, term: str) -> str:
        """
        Genera un resumen mejorado usando solo IA.
        
        Args:
            term (str): T√©rmino para el resumen
            
        Returns:
            str: Resumen mejorado
        """
        prompt = f"""
        Eres un experto en documentaci√≥n acad√©mica. Crea un documento completo y profesional sobre "{term}".

        INSTRUCCIONES ESTRICTAS:
        - NUNCA uses referencias como [1], [2], [3], ‚úÖ, etc.
        - NO agregues s√≠mbolos extra√±os
        - Usa solo texto limpio en espa√±ol
        - Respeta EXACTAMENTE la estructura que te doy
        - NO a√±adas contenido extra al final
        - Basa el contenido en tu conocimiento, s√© preciso y acad√©mico

        FORMATO OBLIGATORIO:

        # {term.title()}

        ## üìñ Definici√≥n
        [Definici√≥n clara y acad√©mica en 1-2 l√≠neas, SIN referencias]

        ## üîç Caracter√≠sticas principales
        - **Aspecto 1**: Descripci√≥n espec√≠fica y detallada
        - **Aspecto 2**: Descripci√≥n espec√≠fica y detallada
        - **Aspecto 3**: Descripci√≥n espec√≠fica y detallada
        - **Aspecto 4**: Descripci√≥n espec√≠fica y detallada

        ## üìÇ Clasificaci√≥n y tipos
        ### Ramas principales
        1. **Rama 1**: Descripci√≥n acad√©mica
        2. **Rama 2**: Descripci√≥n acad√©mica
        3. **Rama 3**: Descripci√≥n acad√©mica

        ### Subdisciplinas
        - Disciplina 1: Enfoque espec√≠fico
        - Disciplina 2: Enfoque espec√≠fico
        - Disciplina 3: Enfoque espec√≠fico

        ## üéØ Aplicaciones y m√©todos
        ### M√©todos de estudio
        - **M√©todo 1**: Descripci√≥n t√©cnica detallada
        - **M√©todo 2**: Descripci√≥n t√©cnica detallada
        - **M√©todo 3**: Descripci√≥n t√©cnica detallada

        ### Aplicaciones pr√°cticas
        - Aplicaci√≥n 1: Contexto espec√≠fico y real
        - Aplicaci√≥n 2: Contexto espec√≠fico y real
        - Aplicaci√≥n 3: Contexto espec√≠fico y real

        ## üîó Conceptos relacionados
        - **Concepto 1**: Relaci√≥n espec√≠fica con {term}
        - **Concepto 2**: Relaci√≥n espec√≠fica con {term}
        - **Concepto 3**: Relaci√≥n espec√≠fica con {term}

        ## üí° Resumen
        > **En s√≠ntesis**: Resumen acad√©mico en 1-2 l√≠neas

        **Puntos clave:**
        - Punto destacado 1 (espec√≠fico y relevante)
        - Punto destacado 2 (espec√≠fico y relevante)
        - Punto destacado 3 (espec√≠fico y relevante)

        ---
        **üìÖ**: {datetime.now().strftime("%d/%m/%Y")} | **ü§ñ**: {DOC_FOOTER_AI_LABEL}

        IMPORTANTE:
        - USA tu conocimiento acad√©mico y cient√≠fico
        - NO uses NINGUNA referencia [1][2][3] ni s√≠mbolos ‚úÖ
        - Mant√©n los emojis SOLO en headers (##)
        - Completa TODAS las secciones con contenido real
        - S√© espec√≠fico, preciso y acad√©mico
        - Termina EXACTAMENTE en el footer, no agregues nada m√°s
        """
        
        return self.generate_content_with_ai(prompt)

# Funciones de utilidad
def clean_ai_content(content: str) -> str:
    """
    Limpia y formatea el contenido generado por IA.
    
    Args:
        content (str): Contenido original
        
    Returns:
        str: Contenido limpio y formateado
    """
    # Remover caracteres problem√°ticos
    content = re.sub(r'\*\*\*+', '**', content)  # Normalizar negritas
    content = re.sub(r'\n{3,}', '\n\n', content)  # Normalizar saltos de l√≠nea
    
    # Asegurar formato markdown correcto
    content = re.sub(r'^#+ ', '# ', content, flags=re.MULTILINE)  # Normalizar headers
    
    return content.strip()

def test_connection(model_name: str = None) -> bool:
    """
    Prueba la conexi√≥n con el servicio de IA.
    
    Args:
        model_name (str): Nombre del modelo a probar
        
    Returns:
        bool: True si la conexi√≥n es exitosa
    """
    try:
        enhancer = ContentEnhancer(model_name)
        return True
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
