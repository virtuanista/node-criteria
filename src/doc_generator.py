#!/usr/bin/env python3
"""
Generador de Documentaci√≥n Estructurada
=======================================

Este m√≥dulo permite generar documentaci√≥n estructurada sobre cualquier t√©rmino
especificado por el usuario, creando un archivo markdown con formato est√°ndar.
"""

import sys
from pathlib import Path
from datetime import datetime

# Importar configuraci√≥n
sys.path.append(str(Path(__file__).parent.parent))
from config import OUTPUT_DIR, DEFAULT_MODEL

# Importar el enhancer de contenido
try:
    from content_enhancer import ContentEnhancer
    AI_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è M√≥dulos de IA no disponibles: {e}")
    print("üìù Usando modo b√°sico.")
    AI_AVAILABLE = False

class DocumentationGenerator:
    """
    Generador de documentaci√≥n estructurada en formato markdown.
    
    Crea un archivo .md con estructura est√°ndar para cualquier t√©rmino.
    """
    
    def __init__(self, output_dir: str = None, use_ai: bool = True, model_name: str = None):
        """
        Inicializa el generador de documentaci√≥n.
        
        Args:
            output_dir (str): Directorio donde se guardar√°n los archivos
            use_ai (bool): Si usar IA (Ollama + Wikipedia) para mejorar el contenido
            model_name (str): Nombre del modelo de Ollama a utilizar
        """
        self.output_dir = Path(output_dir or OUTPUT_DIR)
        self.output_dir.mkdir(exist_ok=True)
        self.use_ai = use_ai and AI_AVAILABLE
        self.model_name = model_name or DEFAULT_MODEL
        
        # Inicializar el enhancer de contenido si est√° disponible
        self.enhancer = None
        if self.use_ai:
            try:
                self.enhancer = ContentEnhancer(self.model_name)
                print(f"ü§ñ Modo IA activado con modelo: {self.model_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è Error inicializando IA: {e}")
                print("üìù Continuando en modo b√°sico...")
                self.use_ai = False
        
        if not self.use_ai:
            print("üìù Usando modo b√°sico (plantillas est√°ticas)")
    
    def generate_documentation(self, term: str) -> str:
        """
        Genera la documentaci√≥n completa para un t√©rmino en un solo archivo.
        
        Args:
            term (str): T√©rmino sobre el cual generar la documentaci√≥n
            
        Returns:
            str: Ruta del archivo creado
        """
        # Crear nombre de archivo limpio
        filename = f"{term.lower().replace(' ', '_')}.md"
        file_path = self.output_dir / filename
        
        print(f"üìÅ Creando documentaci√≥n para: {term}")
        print(f"üìÑ Archivo: {file_path}")
        
        # Generar contenido completo
        content = self._generate_complete_document(term)
        
        # Escribir archivo
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"üéâ Documentaci√≥n completa generada en: {file_path}")
        
        return str(file_path)
    
    def _generate_complete_document(self, term: str) -> str:
        """
        Genera el documento completo con la estructura est√°ndar.
        
        Args:
            term (str): T√©rmino para generar la documentaci√≥n
            
        Returns:
            str: Contenido completo del documento
        """
        if self.use_ai and self.enhancer:
            try:
                print("ü§ñ Generando contenido con IA...")
                return self.enhancer.enhance_summary(term)
            except Exception as e:
                print(f"‚ö†Ô∏è Error con IA, usando plantilla b√°sica: {e}")
        
        # Plantilla b√°sica de respaldo
        return self._get_basic_template(term)
    
    def _get_basic_template(self, term: str) -> str:
        """
        Genera plantilla b√°sica con la estructura est√°ndar.
        
        Args:
            term (str): T√©rmino para personalizar la plantilla
            
        Returns:
            str: Contenido de la plantilla b√°sica
        """
        return f"""# {term.title()}

## Definici√≥n inicial y concisa
{term.title()} es un concepto que se define como [definici√≥n breve y clara del t√©rmino]. Este concepto es relevante en su campo debido a [raz√≥n de importancia].

## Caracter√≠sticas principales
‚Ä¢ **Caracter√≠stica 1:** [Descripci√≥n de la primera caracter√≠stica principal]
‚Ä¢ **Caracter√≠stica 2:** [Descripci√≥n de la segunda caracter√≠stica principal]
‚Ä¢ **Caracter√≠stica 3:** [Descripci√≥n de la tercera caracter√≠stica principal]
‚Ä¢ **Caracter√≠stica 4:** [Descripci√≥n de la cuarta caracter√≠stica principal]

## Ejemplos concretos
1. **Ejemplo pr√°ctico 1:** [Descripci√≥n detallada del primer ejemplo]
2. **Ejemplo pr√°ctico 2:** [Descripci√≥n detallada del segundo ejemplo]
3. **Ejemplo pr√°ctico 3:** [Descripci√≥n detallada del tercer ejemplo]

## Diferenciaci√≥n y aclaraci√≥n

### {term.title()} vs. [Concepto relacionado]
[Explicaci√≥n de las diferencias principales entre ambos conceptos]

### L√≠mites
‚Ä¢ [Limitaci√≥n o aspecto que no abarca {term}]
‚Ä¢ [Otra limitaci√≥n importante]
‚Ä¢ [Qu√© NO es {term}]

---
*Documento generado autom√°ticamente el {datetime.now().strftime("%d/%m/%Y")} usando {'IA' if self.use_ai else 'plantillas b√°sicas'}*
"""

def main():
    """Funci√≥n principal para testing."""
    print("üöÄ Generador de Documentaci√≥n Estructurada")
    print("=" * 50)
    
    generator = DocumentationGenerator()
    
    term = input("üìù Introduce el t√©rmino: ").strip()
    if term:
        try:
            file_path = generator.generate_documentation(term)
            print(f"\nüéâ ¬°Documentaci√≥n generada!")
            print(f"üìÑ Archivo: {file_path}")
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()
